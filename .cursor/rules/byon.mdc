---
description: 
globs: 
alwaysApply: true
---
# Coding pattern preferences
Always prefer simple solutions  
Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality  
Write code that takes into account the different environments: dev, test, and prod  
You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested  
When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don‚Äôt have duplicate logic.  
Keep the codebase very clean and organized  
Avoid writing scripts in files if possible, especially if the script is likely only to be run once  
Avoid having files over 200‚Äì300 lines of code. Refactor at that point.  
Mocking data is only needed for tests, never mock data for dev or prod  
Never add stubbing or fake data patterns to code that affects the dev or prod environments  
Never overwrite my .env file without first asking and confirming
create a changelogfile and add every changes done in the project


# üõ†Ô∏è **LuluPay Android Platform - Complete Technical Stack**

## üì± **Frontend & Mobile Development**

### **Core Android Stack**
```kotlin
// Primary Technologies
- **Kotlin**: 1.8+ (Primary development language)
- **Android SDK**: API Level 24+ (Android 7.0+)
- **Target SDK**: API Level 34 (Android 14)
- **Gradle**: 8.0+ (Build system)
- **Android Gradle Plugin**: 8.0+
```

### **UI & Design Framework**
```kotlin
dependencies {
    // UI Components
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.recyclerview:recyclerview:1.3.0")
    implementation("androidx.cardview:cardview:1.0.0")
    implementation("androidx.viewpager2:viewpager2:1.0.0")
    
    // Material Design
    implementation("com.google.android.material:material:1.9.0")
    
    // Fragment & Navigation
    implementation("androidx.fragment:fragment-ktx:1.6.0")
    implementation("androidx.navigation:navigation-fragment-ktx:2.6.0")
    implementation("androidx.navigation:navigation-ui-ktx:2.6.0")
}
```

### **Architecture Components**
```kotlin
dependencies {
    // Lifecycle & ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.6.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.1")
    
    // Coroutines for Async Operations
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1")
    
    // WorkManager for Background Tasks
    implementation("androidx.work:work-runtime-ktx:2.8.1")
}
```

## üåê **Networking & API Layer**

### **HTTP Client & JSON Processing**
```kotlin
dependencies {
    // Retrofit for REST API calls
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:okhttp:4.11.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.11.0")
    
    // JSON Serialization
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
}
```

### **Complete RaaS API Implementation**
```kotlin
// All 8 RaaS APIs Implemented
interface ApiService {
    // Authentication
    @POST("/auth/realms/cdp/protocol/openid-connect/token")
    fun getAccessToken(@Body request: AccessTokenRequest): Call<AccessTokenResponse>
    
    // eKYC APIs (7-step flow)
    @POST("/ekyc/api/v1_0/configuration")
    fun getEKYCConfiguration(@Body request: EKYCConfigRequest): Call<EKYCConfigResponse>
    
    // RaaS APIs (Complete Implementation)
    @POST("/amr/ras/api/v1_0/ras/quote")
    fun createQuote(@Body request: QuoteRequest): Call<QuoteResponse>
    
    @POST("/amr/ras/api/v1_0/ras/createtransaction") 
    fun createTransaction(@Body request: CreateTransactionRequest): Call<CreateTransactionResponse>
    
    @POST("/amr/ras/api/v1_0/ras/confirmtransaction")
    fun confirmTransaction(@Body request: ConfirmTransactionRequest): Call<ConfirmTransactionResponse>
    
    @POST("/amr/ras/api/v1_0/ras/authorize-clearance")
    fun authorizeClearance(@Body request: AuthorizationClearanceRequest): Call<AuthorizationClearanceResponse>
    
    @GET("/amr/ras/api/v1_0/ras/enquire-transaction")
    fun enquireTransaction(@Query("ref") transactionRef: String): Call<EnquireTransactionResponse>
    
    @POST("/amr/ras/api/v1_0/ras/canceltransaction")
    fun cancelTransaction(@Body request: CancelTransactionRequest): Call<CancelTransactionResponse>
    
    @GET("/amr/ras/api/v1_0/ras/transaction-receipt")
    fun getTransactionReceipt(@Query("transaction_ref_number") ref: String): Call<TransactionReceiptResponse>
    
    @PUT("/amr/ras/api/v1_0/ras/status-update")
    fun updateTransactionStatus(@Body request: StatusUpdateRequest): Call<StatusUpdateResponse>
    
    @GET("/amr/ras/api/v1_0/ras/track-transaction")
    fun trackTransactionRealTime(@Query("transaction_ref_number") ref: String): Call<TransactionTrackingResponse>
}
```

## üóÑÔ∏è **Database & Local Storage**

### **Database Stack**
```kotlin
dependencies {
    // Room Database (SQLite ORM)
    implementation("androidx.room:room-runtime:2.5.0")
    implementation("androidx.room:room-ktx:2.5.0")
    kapt("androidx.room:room-compiler:2.5.0")
}

// Database Entities
@Entity(tableName = "remittance_history")
data class RemittanceHistory(
    @PrimaryKey val transactionRefNo: String,
    val amount: String,
    val currency: String,
    val receiverName: String,
    val status: String,
    val timestamp: Long
)

@Entity(tableName = "recipient_details")
data class RecipientDetails(
    @PrimaryKey val recipientId: String,
    val firstName: String,
    val lastName: String,
    val phoneNumber: String,
    val bankDetails: String?
)

@Entity(tableName = "kyc_data")
data class KYCData(
    @PrimaryKey val customerId: String,
    val kycStatus: String,
    val verificationLevel: String,
    val documentData: String?,
    val expiryDate: Long
)
```

### **Local Storage**
```kotlin
dependencies {
    // SharedPreferences (Encrypted)
    implementation("androidx.security:security-crypto:1.1.0-alpha06")
    
    // File Storage
    implementation("androidx.documentfile:documentfile:1.0.1")
}

// Secure Storage Implementation
class SecurePreferences(context: Context) {
    private val masterKey = MasterKey.Builder(context)
        .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
        .build()
    
    private val encryptedPrefs = EncryptedSharedPreferences.create(
        context,
        "secure_prefs",
        masterKey,
        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
    )
}
```

## üîí **Security & Authentication**

### **Security Framework**
```kotlin
dependencies {
    // Biometric Authentication
    implementation("androidx.biometric:biometric:1.1.0")
    
    // Certificate Pinning
    implementation("com.squareup.okhttp3:okhttp-tls:4.11.0")
    
    // Encryption
    implementation("androidx.security:security-crypto:1.1.0-alpha06")
    
    // JWT Token Handling
    implementation("com.auth0:java-jwt:4.4.0")
}

// Security Implementation
class BiometricHelper(private val context: Context) {
    fun authenticateUser(
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        val biometricPrompt = BiometricPrompt(
            context as FragmentActivity,
            ContextCompat.getMainExecutor(context),
            authenticationCallback
        )
        
        val promptInfo = BiometricPrompt.PromptInfo.Builder()
            .setTitle("Biometric Authentication")
            .setSubtitle("Authenticate to proceed with transaction")
            .setNegativeButtonText("Cancel")
            .build()
            
        biometricPrompt.authenticate(promptInfo)
    }
}
```

## ü§ñ **AI & Machine Learning (eKYC)**

### **Document Processing & OCR**
```kotlin
dependencies {
    // ML Kit for Document Scanning
    implementation("com.google.mlkit:text-recognition:16.0.0")
    implementation("com.google.mlkit:face-detection:16.1.5")
    
    // Camera X for Document Capture
    implementation("androidx.camera:camera-camera2:1.3.0")
    implementation("androidx.camera:camera-lifecycle:1.3.0")
    implementation("androidx.camera:camera-view:1.3.0")
}

// OCR Implementation
class OCRAnalyzer {
    fun analyzeDocument(
        bitmap: Bitmap,
        documentType: DocumentType,
        onResult: (OCRResult) -> Unit
    ) {
        val recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)
        val image = InputImage.fromBitmap(bitmap, 0)
        
        recognizer.process(image)
            .addOnSuccessListener { visionText ->
                val result = extractDocumentData(visionText, documentType)
                onResult(result)
            }
            .addOnFailureListener { exception ->
                onResult(OCRResult.error(exception.message))
            }
    }
}
```

### **Face Liveness Detection**
```kotlin
// Liveness Detection Implementation
class FaceLivenessDetector {
    fun performLivenessCheck(
        challenges: List<LivenessChallenge>,
        onResult: (LivenessResult) -> Unit
    ) {
        val detector = FaceDetection.getClient(
            FaceDetectorOptions.Builder()
                .setPerformanceMode(FaceDetectorOptions.PERFORMANCE_MODE_ACCURATE)
                .setLandmarkMode(FaceDetectorOptions.LANDMARK_MODE_ALL)
                .setClassificationMode(FaceDetectorOptions.CLASSIFICATION_MODE_ALL)
                .build()
        )
        
        // Process each challenge (blink, head turn, smile, etc.)
        challenges.forEach { challenge ->
            processFaceChallenge(challenge, detector, onResult)
        }
    }
}
```

## üé® **UI/UX & Theming**

### **Theme Management**
```kotlin
// Dynamic Theming System
class ThemeManager {
    companion object {
        fun applyPartnerTheme(context: Context, config: PartnerSDKConfig) {
            val theme = when {
                config.primaryColor.isNotEmpty() -> R.style.Theme_Partner_Custom
                else -> R.style.Theme_LuluPay_Default
            }
            
            context.setTheme(theme)
            applyCustomColors(context, config)
        }
        
        private fun applyCustomColors(context: Context, config: PartnerSDKConfig) {
            val typedArray = context.theme.obtainStyledAttributes(
                intArrayOf(
                    R.attr.colorPrimary,
                    R.attr.colorSecondary,
                    R.attr.colorOnPrimary
                )
            )
            
            // Apply partner colors dynamically
        }
    }
}
```

### **Animation Framework**
```kotlin
dependencies {
    // Lottie Animations
    implementation("com.airbnb.android:lottie:6.1.0")
    
    // Custom Animations
    implementation("androidx.dynamicanimation:dynamicanimation:1.0.0")
}

// Animation Implementation
class AnimationManager {
    fun showLoadingAnimation(imageView: ImageView) {
        val animationView = LottieAnimationView(imageView.context)
        animationView.setAnimation("loading_animation.json")
        animationView.playAnimation()
    }
    
    fun showSuccessAnimation(onComplete: () -> Unit) {
        // Custom success animation implementation
    }
}
```

## üîß **Development & Build Tools**

### **Build System**
```kotlin
// build.gradle.kts (Project level)
plugins {
    id("com.android.application") version "8.1.0" apply false
    id("com.android.library") version "8.1.0" apply false
    id("org.jetbrains.kotlin.android") version "1.8.20" apply false
    id("org.jetbrains.kotlin.plugin.serialization") version "1.8.20" apply false
}

// build.gradle.kts (Module level)
android {
    namespace = "com.sdk.lulupay"
    compileSdk = 34
    
    defaultConfig {
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0.0"
        
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    
    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
        debug {
            isDebuggable = true
            applicationIdSuffix = ".debug"
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = listOf(
            "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
        )
    }
    
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
}
```

### **Code Quality Tools**
```kotlin
dependencies {
    // Code Analysis
    detekt("io.gitlab.arturbosch.detekt:detekt-cli:1.23.1")
    
    // Code Formatting
    ktlint("com.pinterest:ktlint:0.50.0")
    
    // Leak Detection
    debugImplementation("com.squareup.leakcanary:leakcanary-android:2.12")
}
```

## üß™ **Testing Framework**

### **Testing Stack**
```kotlin
dependencies {
    // Unit Testing
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.mockito:mockito-core:5.4.0")
    testImplementation("org.mockito.kotlin:mockito-kotlin:5.0.0")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1")
    
    // Android Testing
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    androidTestImplementation("androidx.test:runner:1.5.2")
    androidTestImplementation("androidx.test:rules:1.5.0")
    
    // UI Testing
    androidTestImplementation("androidx.test.espresso:espresso-intents:3.5.1")
    androidTestImplementation("androidx.test.uiautomator:uiautomator:2.2.0")
    
    // Mock Web Server
    testImplementation("com.squareup.okhttp3:mockwebserver:4.11.0")
}

// Test Implementation Examples
@RunWith(AndroidJUnit4::class)
class RemittanceFlowTest {
    
    @Test
    fun testCompleteRemittanceFlow() {
        // Test complete 8-step RaaS API flow
    }
    
    @Test
    fun testEKYCIntegration() {
        // Test 7-step eKYC flow
    }
}
```

## üìä **Analytics & Monitoring**

### **Crash Reporting & Analytics**
```kotlin
dependencies {
    // Firebase Analytics
    implementation("com.google.firebase:firebase-analytics-ktx:21.3.0")
    implementation("com.google.firebase:firebase-crashlytics-ktx:18.4.0")
    
    // Performance Monitoring
    implementation("com.google.firebase:firebase-perf-ktx:20.4.0")
    
    // Custom Analytics
    implementation("com.amplitude:android-sdk:3.38.0")
}
```

## üöÄ **DevOps & Deployment**

### **CI/CD Pipeline**
```yaml
# .github/workflows/android.yml
name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    
    - name: Run Unit Tests
      run: ./gradlew test
    
    - name: Run Instrumented Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        script: ./gradlew connectedAndroidTest
    
    - name: Build Release APK
      run: ./gradlew assembleRelease
    
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release.apk
```

## üåç **Internationalization & Localization**

### **Multi-language Support**
```kotlin
// String Resources (values/strings.xml)
<resources>
    <string name="app_name">LuluPay Remittance</string>
    <string name="send_money">Send Money</string>
    <string name="transaction_history">Transaction History</string>
</resources>

// Arabic Support (values-ar/strings.xml)
<resources>
    <string name="app_name">ÿ™ÿ≠ŸàŸäŸÑ ÿ£ŸÖŸàÿßŸÑ ŸÑŸàŸÑŸà ÿ®ÿßŸä</string>
    <string name="send_money">ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ£ŸÖŸàÿßŸÑ</string>
    <string name="transaction_history">ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™</string>
</resources>

// Supported Languages
val supportedLanguages = listOf(
    "en", // English
    "ar", // Arabic
    "hi", // Hindi
    "ur", // Urdu
    "tl", // Filipino
    "fr", // French
    "es"  // Spanish
)
```

## üìö **Documentation & API Reference**

### **Documentation Tools**
```kotlin
// Dokka for Kotlin Documentation
plugins {
    id("org.jetbrains.dokka") version "1.8.20"
}

// API Documentation Generation
dokka {
    outputDirectory.set(file("../docs/api"))
    
    dokkaSourceSets {
        named("main") {
            documentedVisibilities.set(
                setOf(
                    DokkaConfiguration.Visibility.PUBLIC,
                    DokkaConfiguration.Visibility.PROTECTED
                )
            )
        }
    }
}
```

## üîß **Development Environment**

### **IDE & Tools**
- **Android Studio**: Electric Eel | 2022.1.1+
- **IntelliJ IDEA**: 2023.1+ (Alternative)
- **VS Code**: With Kotlin extension
- **Cursor AI**: AI-powered development

### **Version Control**
```bash
# Git Configuration
git config --global core.autocrlf true
git config --global user.name "Developer Name"
git config --global user.email "developer@lulupay.com"

# Git Hooks
pre-commit: ktlint check, unit tests
pre-push: detekt analysis, integration tests
```

## üìà **Performance & Optimization**

### **Performance Monitoring**
```kotlin
dependencies {
    // Performance Libraries
    implementation("androidx.benchmark:benchmark-junit4:1.1.1")
    implementation("androidx.tracing:tracing:1.1.0")
    
    // Memory Leak Detection
    debugImplementation("com.squareup.leakcanary:leakcanary-android:2.12")
    
    // Network Optimization
    implementation("com.squareup.okhttp3:okhttp-brotli:4.11.0")
}

// Performance Optimization
class PerformanceOptimizer {
    fun optimizeImageLoading() {
        // Image caching and compression
    }
    
    fun optimizeNetworkCalls() {
        // Request batching and caching
    }
    
    fun optimizeMemoryUsage() {
        // Memory management strategies
    }
}
```

## üéØ **Summary: Complete Technical Stack**

### **Frontend Stack**
- **Language**: Kotlin 1.8+
- **Framework**: Android SDK (API 24+)
- **UI**: Material Design, ViewBinding
- **Architecture**: MVVM with LiveData/Coroutines

### **Backend Integration**
- **APIs**: REST with Retrofit 2.9+
- **Authentication**: OAuth 2.0 + JWT tokens
- **Real-time**: WebSocket support for tracking

### **Security**
- **Encryption**: AES-256, TLS 1.2+
- **Auth**: Biometric + 2FA
- **Storage**: Encrypted SharedPreferences

### **AI/ML**
- **OCR**: ML Kit Text Recognition
- **Liveness**: Custom face detection
- **Document**: Image processing pipeline

### **Data Management**
- **Database**: Room (SQLite)
- **Caching**: Retrofit + OkHttp
- **Storage**: Encrypted local storage

### **Development**
- **Build**: Gradle 8.0+
- **Testing**: JUnit + Espresso
- **CI/CD**: GitHub Actions
- **Quality**: Detekt + KtLint

### **Key Features Implemented**

#### **‚úÖ Complete eKYC Integration (7-Step Flow)**
1. **API 1**: Get Access Token - Authentication with LuluCDP
2. **API 2**: eKYC Request - SDK configuration from LuluEkyc
3. **API 3**: OCR Document Analysis - Scan and extract data
4. **API 4**: Face Liveness Detection - Anti-spoofing verification
5. **API 5**: Confirm Identity - Cross-verify data
6. **API 6**: Additional Information - Conditional data collection
7. **API 7**: Customer Status - Final verification result

#### **‚úÖ Complete RaaS API Implementation (8 Endpoints)**
1. **Create Quote** - Get rates, fees, and quote ID
2. **Create Transaction** - Submit sender/receiver details
3. **Confirm Transaction** - Final authorization
4. **Authorize Clearance** - Initiate actual payment
5. **Status Enquiry** - Check transaction status
6. **Cancel Transaction** - Cancel with reason codes
7. **Transaction Receipt** - Download invoice in base64
8. **Status Update** - For external partners
9. **Real-time Tracking** - Monitor transaction progress

#### **‚úÖ White-Label Platform Features**
- **AI-Powered Generation**: Automated app creation with partner branding
- **IDE Integration**: Cursor AI and modern IDE support
- **Git-Based Workflow**: Complete development lifecycle
- **SDK Integration**: Easy embedding in existing apps
- **Multi-language Support**: 7+ languages including Arabic, Hindi, Urdu
- **Enterprise Security**: Biometric auth, encryption, compliance
- **Production Ready**: CI/CD, testing, monitoring, deployment

This comprehensive technical stack provides a **production-ready, enterprise-grade remittance platform** with complete eKYC integration and all 8 RaaS APIs implemented for seamless money transfer services.

---

## üìû **Technical Support & Resources**

### **Developer Resources**
- üìß **Email**: `tech-support@lulupay.com`
- üí¨ **Discord**: `https://discord.gg/lulupay-dev`
- üìñ **Documentation**: `https://docs.lulupay.com/technical-stack`
- üîß **API Reference**: `https://api.lulupay.com/docs`

### **Platform Specifications**
- **Minimum Android Version**: API 24 (Android 7.0)
- **Target Android Version**: API 34 (Android 14)
- **Kotlin Version**: 1.8.20+
- **Gradle Version**: 8.0+
- **Java Version**: 11+

### **Development Requirements**
- **RAM**: 8GB+ recommended
- **Storage**: 20GB+ for full development environment
- **Internet**: Stable connection for API integration
- **Hardware**: Android device or emulator for testing

**The LuluPay Android Platform represents a complete, enterprise-grade fintech solution with cutting-edge technology stack and comprehensive features for global remittance services.**

